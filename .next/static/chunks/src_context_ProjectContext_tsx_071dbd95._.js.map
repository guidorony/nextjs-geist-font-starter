{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/context/ProjectContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Project, Expense, ProjectSummary, User } from '@/types';\n\ninterface ProjectContextType {\n  projects: Project[];\n  currentUser: User | null;\n  login: (email: string, password: string) => boolean;\n  register: (email: string, password: string, name: string) => boolean;\n  logout: () => void;\n  addProject: (project: Omit<Project, 'id' | 'expenses'>) => void;\n  updateProject: (id: string, project: Partial<Project>) => void;\n  deleteProject: (id: string) => void;\n  addExpense: (projectId: string, expense: Omit<Expense, 'id'>) => void;\n  updateExpense: (projectId: string, expenseId: string, expense: Partial<Expense>) => void;\n  deleteExpense: (projectId: string, expenseId: string) => void;\n  getProjectSummaries: () => ProjectSummary[];\n  getProjectById: (id: string) => Project | undefined;\n}\n\nconst ProjectContext = createContext<ProjectContextType | undefined>(undefined);\n\nexport function ProjectProvider({ children }: { children: React.ReactNode }) {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  // Load data from localStorage on mount\n  useEffect(() => {\n    const savedProjects = localStorage.getItem('projects');\n    const savedUser = localStorage.getItem('currentUser');\n    if (savedProjects) {\n      setProjects(JSON.parse(savedProjects));\n    }\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n  }, []);\n\n  // Save to localStorage whenever projects change\n  useEffect(() => {\n    localStorage.setItem('projects', JSON.stringify(projects));\n  }, [projects]);\n\n  const login = (email: string, password: string): boolean => {\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    const user = users.find((u: User) => u.email === email);\n    if (user) {\n      setCurrentUser(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return true;\n    }\n    return false;\n  };\n\n  const register = (email: string, password: string, name: string): boolean => {\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    if (users.find((u: User) => u.email === email)) {\n      return false;\n    }\n    const newUser: User = {\n      id: Date.now().toString(),\n      email,\n      name\n    };\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    setCurrentUser(newUser);\n    localStorage.setItem('currentUser', JSON.stringify(newUser));\n    return true;\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n  };\n\n  const addProject = (projectData: Omit<Project, 'id' | 'expenses'>) => {\n    const newProject: Project = {\n      ...projectData,\n      id: Date.now().toString(),\n      expenses: []\n    };\n    setProjects(prev => [...prev, newProject]);\n  };\n\n  const updateProject = (id: string, projectData: Partial<Project>) => {\n    setProjects(prev => prev.map(project => \n      project.id === id ? { ...project, ...projectData } : project\n    ));\n  };\n\n  const deleteProject = (id: string) => {\n    setProjects(prev => prev.filter(project => project.id !== id));\n  };\n\n  const addExpense = (projectId: string, expenseData: Omit<Expense, 'id'>) => {\n    const newExpense: Expense = {\n      ...expenseData,\n      id: Date.now().toString()\n    };\n\n    setProjects(prev => prev.map(project => \n      project.id === projectId \n        ? { ...project, expenses: [...project.expenses, newExpense] }\n        : project\n    ));\n  };\n\n  const updateExpense = (projectId: string, expenseId: string, expenseData: Partial<Expense>) => {\n    setProjects(prev => prev.map(project => \n      project.id === projectId \n        ? {\n            ...project,\n            expenses: project.expenses.map(expense =>\n              expense.id === expenseId ? { ...expense, ...expenseData } : expense\n            )\n          }\n        : project\n    ));\n  };\n\n  const deleteExpense = (projectId: string, expenseId: string) => {\n    setProjects(prev => prev.map(project => \n      project.id === projectId \n        ? {\n            ...project,\n            expenses: project.expenses.filter(expense => expense.id !== expenseId)\n          }\n        : project\n    ));\n  };\n\n  const getProjectSummaries = (): ProjectSummary[] => {\n    return projects.map(project => ({\n      id: project.id,\n      sot: project.sot,\n      cliente: project.cliente,\n      fecha: project.fecha,\n      lugar: project.lugar,\n      area: project.area,\n      subArea: project.subArea,\n      montoTotal: project.expenses.reduce((total, expense) => {\n        let expenseTotal = 0;\n        if (expense.movilidad) expenseTotal += expense.movilidad.monto;\n        if (expense.viaticos?.hospedaje) expenseTotal += expense.viaticos.hospedaje.monto;\n        if (expense.viaticos?.alimento) {\n          expenseTotal += Object.values(expense.viaticos.alimento).reduce((sum, val) => sum + (val || 0), 0);\n        }\n        if (expense.compras) expenseTotal += expense.compras.monto;\n        return total + expenseTotal;\n      }, 0)\n    }));\n  };\n\n  const getProjectById = (id: string): Project | undefined => {\n    return projects.find(project => project.id === id);\n  };\n\n  return (\n    <ProjectContext.Provider value={{\n      projects,\n      currentUser,\n      login,\n      register,\n      logout,\n      addProject,\n      updateProject,\n      deleteProject,\n      addExpense,\n      updateExpense,\n      deleteExpense,\n      getProjectSummaries,\n      getProjectById\n    }}>\n      {children}\n    </ProjectContext.Provider>\n  );\n}\n\nexport function useProjects() {\n  const context = useContext(ProjectContext);\n  if (context === undefined) {\n    throw new Error('useProjects must be used within a ProjectProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}